#include <stdlib.h>
#include <string.h>
#include <jansson.h>
#include <stdint.h>

#define POP(_name, _data, _size, _type) \
    if (_size < sizeof(_type)) \
        exit(0); \
    _size -= sizeof(_type); \
    _type _name = (_type)*_data; \
    _data += sizeof(_type); 

uint8_t pop_uint8(char **data, size_t *size) {
    if (*size < sizeof(uint8_t))
        exit(0);

    *size -= sizeof(uint8_t);
    uint8_t val = (uint8_t)**data;
    *data += sizeof(uint8_t);

    return val;
}

uint32_t pop_uint32(char **data, size_t *size) {
    if (*size < sizeof(uint32_t))
        exit(0);

    *size -= sizeof(uint32_t);
    uint8_t val = (uint32_t)**data;
    *data += sizeof(uint32_t);

    return val;
}


int LLVMFuzzerTestOneInput(char *data, size_t size)
{
    if (size < 5) 
        return 0;

    char *data_cur = data;
    POP(json_decode_flags, data_cur, size, uint8_t);
    POP(json_encode_flags, data_cur, size, uint32_t);

    size_t i;
    char *text;

    json_t *root;
    json_error_t error;

    char *new_data = malloc(size + 1);
    if (!new_data)
        return 1;
    memcpy(new_data, data_cur, size);
    new_data[size] = '\0';

    root = json_loads(new_data, json_decode_flags, &error);
    if (!root)
        goto cleanup;

    char *dump = json_dumps(root, json_encode_flags);
    if (dump)
        free(dump);
    json_decref(root);
        
    cleanup:
    free(new_data);
    return 0;

}
